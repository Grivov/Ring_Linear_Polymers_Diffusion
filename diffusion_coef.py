import numpy as npfrom IPython.display import clear_outputimport matplotlib.pyplot as pltfrom scipy import statsimport osdef convert_disp(path_to_in_file, num_atoms, time_steps):        """    Function that reads displacements from .dump file. In this case dump file contains     infromation about simulation that is repeated for each time step in first 9 lines, thus    first 9 lines should be ignored each time.    """            data = []    with open(path_to_in_file) as f:        all_lines = f.readlines()    for time_step in np.arange(time_steps):        time_step_lo = 9 + time_step * (num_atoms + 9)        time_step_hi = time_step_lo + num_atoms        for line in all_lines[time_step_lo:time_step_hi]:            stripped = [float(s.strip()) for s in line.split() if s.strip()]            data.append(stripped[2:])                # Updating progress        print(f"Processed timestep {time_step+1}/{time_steps}")        clear_output(wait = True)            return datadef diffusion_coef(path_to_in_file, num_atoms, time_steps, length) :    """    Function that finds diffusion coefficient in units of <distance unit>^2 * <time_step>^(-1) from     displacement data. Each new timestep should contain information about displacement relative to     previous time step. Variable length refers to the length of each polymer molecule.    """    time = np.arange(1, int(time_steps + 1), 1)    msd = []        data_com_lin = []    data_lin = convert_disp(path_to_in_file, num_atoms, time_steps)    for molecule in np.array(data_lin).reshape(-1,length,3):        data_com_lin.append(np.mean(molecule, axis = 0))            num_molecules = int(num_atoms / length)        data_com_lin= np.power(np.array(data_com_lin).reshape(-1, num_molecules, 3) , 2)    delta_r = np.sum(data_com_lin, axis = 2)    print(delta_r.shape)    print(delta_r[0].shape)        msd = np.mean(delta_r, axis = 1)    plt.plot(time, msd)    slope, intercept, r_value, p_value, std_err = stats.linregress(time,msd)        return slopenum_atoms = 11520time_steps = 300length = 36directory = '/Users/vova/Downloads/Out_DISP_sp/'plt.figure()SLOPES_LINEAR = []for file in os.listdir(directory):    if file.startswith("linear"):        file_path = os.path.join(directory, file)        slope = diffusion_coef(file_path, num_atoms, time_steps, length)                SLOPES_LINEAR.append(slope)        plt.show()directory = '/Users/vova/Downloads/Out_DISP_sp/'plt.figure()SLOPES_RING = []for file in os.listdir(directory):    if file.startswith("ring"):        file_path = os.path.join(directory, file)        slope = diffusion_coef(file_path, num_atoms, time_steps, length)                SLOPES_RING.append(slope)        plt.show()